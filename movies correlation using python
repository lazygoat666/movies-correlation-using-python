#import libraries
import pandas as pd 
import seaborn as sns
import numpy as np

import matplotlib
import matplotlib.pyplot as plt

#from matplotlibpyplot import figure

%matplotlib inline

matplotlib.rcParams['figure.figsize']=(12,8)#adjusts the configuration of the plots we will create

#read in the data

df=pd.read_csv(r'E:\Data analyst practise\Movie\movies.csv')

#look at the data
df.head()


# see if there is any missing data
for col in df.columns:
    pct_missing = np.mean(df[col].isnull())
    print('{} - {}%'.format(col,pct_missing))
    
    
# change data type of columns

df['budget'] = df['budget'].astype('int64')

df['gross'] = df['gross'].astype('int64')

df['runtime'] = df['runtime'].astype('int64')

df['votes'] = df['votes'].astype('int64')

#deal with 'released'to standard type,and creat correct year column

df['yearcorrect'] = df['released'].astype(str).str[:4]
df


df.sort_values(by=['gross'],inplace=False,ascending=False)
pd.set_option('display.max_rows',None)
df.head()

#drop any duplicates

df['company'] = df['company'].drop_duplicates().sort_values(ascending=False)

#scatter plot with budget va gross


plt.scatter(x=df['budget'],y=df['gross'])

plt.title('budget vs gross earnings')
plt.xlabel('gross earnings')
plt.ylabel('budget for film')

plt.show


#plot budget vs gross using seaborn

sns.regplot(x='budget',y='gross',data=df,scatter_kws={'color':'red'},line_kws={'color':'blue'})

# let's start looking ar correlation

df.corr(method ='spearman') #pearson,kendall,spearman

#high correlation between budget and gross
correlation_matrix = df.corr(method='pearson')

sns.heatmap(correlation_matrix,annot=True)

plt.title('correlation matric for numeric feature')
plt.xlabel('movie featrues')
plt.ylabel('movie features')

plt.show()

#looks at company

df_numerized = df

for col_name in df_numerized.columns:
    if(df_numerized[col_name].dtype == 'object'):
        df_numerized[col_name]=df_numerized[col_name].astype('category')
        df_numerized[col_name]=df_numerized[col_name].cat.codes

df_numerized
        
correlation_matrix2 = df_numerized.corr(method='pearson')

sns.heatmap(correlation_matrix2,annot=True)

plt.title('correlation matric for numeric feature')
plt.xlabel('movie featrues')
plt.ylabel('movie features')

plt.show()       
        
correlation_mat = df_numerized.corr()

corr_pairs = correlation_mat.unstack()

corr_pairs

sorted_pairs = corr_pairs.sort_values()

sorted_pairs

high_corr = sorted_pairs[(sorted_pairs)> 0.5]

high_corr





